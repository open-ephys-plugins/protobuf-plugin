// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ephys_edi.proto

#ifndef PROTOBUF_ephys_5fedi_2eproto__INCLUDED
#define PROTOBUF_ephys_5fedi_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "aibsmw_messages.pb.h"
// @@protoc_insertion_point(includes)

namespace protobuf_ephys_5fedi_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[8];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsrequest_system_infoImpl();
void InitDefaultsrequest_system_info();
void InitDefaultssystem_infoImpl();
void InitDefaultssystem_info();
void InitDefaultsrequest_system_statusImpl();
void InitDefaultsrequest_system_status();
void InitDefaultssystem_statusImpl();
void InitDefaultssystem_status();
void InitDefaultsset_data_file_pathImpl();
void InitDefaultsset_data_file_path();
void InitDefaultsopen_configuration_fileImpl();
void InitDefaultsopen_configuration_file();
void InitDefaultsacquisitionImpl();
void InitDefaultsacquisition();
void InitDefaultsrecordingImpl();
void InitDefaultsrecording();
inline void InitDefaults() {
  InitDefaultsrequest_system_info();
  InitDefaultssystem_info();
  InitDefaultsrequest_system_status();
  InitDefaultssystem_status();
  InitDefaultsset_data_file_path();
  InitDefaultsopen_configuration_file();
  InitDefaultsacquisition();
  InitDefaultsrecording();
}
}  // namespace protobuf_ephys_5fedi_2eproto
class acquisition;
class acquisitionDefaultTypeInternal;
extern acquisitionDefaultTypeInternal _acquisition_default_instance_;
class open_configuration_file;
class open_configuration_fileDefaultTypeInternal;
extern open_configuration_fileDefaultTypeInternal _open_configuration_file_default_instance_;
class recording;
class recordingDefaultTypeInternal;
extern recordingDefaultTypeInternal _recording_default_instance_;
class request_system_info;
class request_system_infoDefaultTypeInternal;
extern request_system_infoDefaultTypeInternal _request_system_info_default_instance_;
class request_system_status;
class request_system_statusDefaultTypeInternal;
extern request_system_statusDefaultTypeInternal _request_system_status_default_instance_;
class set_data_file_path;
class set_data_file_pathDefaultTypeInternal;
extern set_data_file_pathDefaultTypeInternal _set_data_file_path_default_instance_;
class system_info;
class system_infoDefaultTypeInternal;
extern system_infoDefaultTypeInternal _system_info_default_instance_;
class system_status;
class system_statusDefaultTypeInternal;
extern system_statusDefaultTypeInternal _system_status_default_instance_;

enum system_status_status_type {
  system_status_status_type_READY = 0,
  system_status_status_type_BUSY = 1,
  system_status_status_type_ERROR = 2
};
bool system_status_status_type_IsValid(int value);
const system_status_status_type system_status_status_type_status_type_MIN = system_status_status_type_READY;
const system_status_status_type system_status_status_type_status_type_MAX = system_status_status_type_ERROR;
const int system_status_status_type_status_type_ARRAYSIZE = system_status_status_type_status_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* system_status_status_type_descriptor();
inline const ::std::string& system_status_status_type_Name(system_status_status_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    system_status_status_type_descriptor(), value);
}
inline bool system_status_status_type_Parse(
    const ::std::string& name, system_status_status_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<system_status_status_type>(
    system_status_status_type_descriptor(), name, value);
}
enum acquisition_command_type {
  acquisition_command_type_START = 0,
  acquisition_command_type_STOP = 1
};
bool acquisition_command_type_IsValid(int value);
const acquisition_command_type acquisition_command_type_command_type_MIN = acquisition_command_type_START;
const acquisition_command_type acquisition_command_type_command_type_MAX = acquisition_command_type_STOP;
const int acquisition_command_type_command_type_ARRAYSIZE = acquisition_command_type_command_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* acquisition_command_type_descriptor();
inline const ::std::string& acquisition_command_type_Name(acquisition_command_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    acquisition_command_type_descriptor(), value);
}
inline bool acquisition_command_type_Parse(
    const ::std::string& name, acquisition_command_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<acquisition_command_type>(
    acquisition_command_type_descriptor(), name, value);
}
enum recording_command_type {
  recording_command_type_START = 0,
  recording_command_type_STOP = 1
};
bool recording_command_type_IsValid(int value);
const recording_command_type recording_command_type_command_type_MIN = recording_command_type_START;
const recording_command_type recording_command_type_command_type_MAX = recording_command_type_STOP;
const int recording_command_type_command_type_ARRAYSIZE = recording_command_type_command_type_MAX + 1;

const ::google::protobuf::EnumDescriptor* recording_command_type_descriptor();
inline const ::std::string& recording_command_type_Name(recording_command_type value) {
  return ::google::protobuf::internal::NameOfEnum(
    recording_command_type_descriptor(), value);
}
inline bool recording_command_type_Parse(
    const ::std::string& name, recording_command_type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<recording_command_type>(
    recording_command_type_descriptor(), name, value);
}
// ===================================================================

class request_system_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_system_info) */ {
 public:
  request_system_info();
  virtual ~request_system_info();

  request_system_info(const request_system_info& from);

  inline request_system_info& operator=(const request_system_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  request_system_info(request_system_info&& from) noexcept
    : request_system_info() {
    *this = ::std::move(from);
  }

  inline request_system_info& operator=(request_system_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request_system_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request_system_info* internal_default_instance() {
    return reinterpret_cast<const request_system_info*>(
               &_request_system_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(request_system_info* other);
  friend void swap(request_system_info& a, request_system_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline request_system_info* New() const PROTOBUF_FINAL { return New(NULL); }

  request_system_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const request_system_info& from);
  void MergeFrom(const request_system_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(request_system_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // @@protoc_insertion_point(class_scope:request_system_info)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::message_header* header_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsrequest_system_infoImpl();
};
// -------------------------------------------------------------------

class system_info : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:system_info) */ {
 public:
  system_info();
  virtual ~system_info();

  system_info(const system_info& from);

  inline system_info& operator=(const system_info& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  system_info(system_info&& from) noexcept
    : system_info() {
    *this = ::std::move(from);
  }

  inline system_info& operator=(system_info&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_info& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const system_info* internal_default_instance() {
    return reinterpret_cast<const system_info*>(
               &_system_info_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(system_info* other);
  friend void swap(system_info& a, system_info& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline system_info* New() const PROTOBUF_FINAL { return New(NULL); }

  system_info* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const system_info& from);
  void MergeFrom(const system_info& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(system_info* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string software_revision = 2;
  bool has_software_revision() const;
  void clear_software_revision();
  static const int kSoftwareRevisionFieldNumber = 2;
  const ::std::string& software_revision() const;
  void set_software_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_software_revision(::std::string&& value);
  #endif
  void set_software_revision(const char* value);
  void set_software_revision(const char* value, size_t size);
  ::std::string* mutable_software_revision();
  ::std::string* release_software_revision();
  void set_allocated_software_revision(::std::string* software_revision);

  // required string hardware_revision = 3;
  bool has_hardware_revision() const;
  void clear_hardware_revision();
  static const int kHardwareRevisionFieldNumber = 3;
  const ::std::string& hardware_revision() const;
  void set_hardware_revision(const ::std::string& value);
  #if LANG_CXX11
  void set_hardware_revision(::std::string&& value);
  #endif
  void set_hardware_revision(const char* value);
  void set_hardware_revision(const char* value, size_t size);
  ::std::string* mutable_hardware_revision();
  ::std::string* release_hardware_revision();
  void set_allocated_hardware_revision(::std::string* hardware_revision);

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // @@protoc_insertion_point(class_scope:system_info)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_software_revision();
  void clear_has_software_revision();
  void set_has_hardware_revision();
  void clear_has_hardware_revision();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr software_revision_;
  ::google::protobuf::internal::ArenaStringPtr hardware_revision_;
  ::message_header* header_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultssystem_infoImpl();
};
// -------------------------------------------------------------------

class request_system_status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:request_system_status) */ {
 public:
  request_system_status();
  virtual ~request_system_status();

  request_system_status(const request_system_status& from);

  inline request_system_status& operator=(const request_system_status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  request_system_status(request_system_status&& from) noexcept
    : request_system_status() {
    *this = ::std::move(from);
  }

  inline request_system_status& operator=(request_system_status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const request_system_status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const request_system_status* internal_default_instance() {
    return reinterpret_cast<const request_system_status*>(
               &_request_system_status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(request_system_status* other);
  friend void swap(request_system_status& a, request_system_status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline request_system_status* New() const PROTOBUF_FINAL { return New(NULL); }

  request_system_status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const request_system_status& from);
  void MergeFrom(const request_system_status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(request_system_status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // @@protoc_insertion_point(class_scope:request_system_status)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::message_header* header_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsrequest_system_statusImpl();
};
// -------------------------------------------------------------------

class system_status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:system_status) */ {
 public:
  system_status();
  virtual ~system_status();

  system_status(const system_status& from);

  inline system_status& operator=(const system_status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  system_status(system_status&& from) noexcept
    : system_status() {
    *this = ::std::move(from);
  }

  inline system_status& operator=(system_status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const system_status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const system_status* internal_default_instance() {
    return reinterpret_cast<const system_status*>(
               &_system_status_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(system_status* other);
  friend void swap(system_status& a, system_status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline system_status* New() const PROTOBUF_FINAL { return New(NULL); }

  system_status* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const system_status& from);
  void MergeFrom(const system_status& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(system_status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef system_status_status_type status_type;
  static const status_type READY =
    system_status_status_type_READY;
  static const status_type BUSY =
    system_status_status_type_BUSY;
  static const status_type ERROR2 =
    system_status_status_type_ERROR;
  static inline bool status_type_IsValid(int value) {
    return system_status_status_type_IsValid(value);
  }
  static const status_type status_type_MIN =
    system_status_status_type_status_type_MIN;
  static const status_type status_type_MAX =
    system_status_status_type_status_type_MAX;
  static const int status_type_ARRAYSIZE =
    system_status_status_type_status_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  status_type_descriptor() {
    return system_status_status_type_descriptor();
  }
  static inline const ::std::string& status_type_Name(status_type value) {
    return system_status_status_type_Name(value);
  }
  static inline bool status_type_Parse(const ::std::string& name,
      status_type* value) {
    return system_status_status_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required string message = 3;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 3;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // required string source_message_id = 4;
  bool has_source_message_id() const;
  void clear_source_message_id();
  static const int kSourceMessageIdFieldNumber = 4;
  const ::std::string& source_message_id() const;
  void set_source_message_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_message_id(::std::string&& value);
  #endif
  void set_source_message_id(const char* value);
  void set_source_message_id(const char* value, size_t size);
  ::std::string* mutable_source_message_id();
  ::std::string* release_source_message_id();
  void set_allocated_source_message_id(::std::string* source_message_id);

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // required .system_status.status_type status = 2 [default = READY];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::system_status_status_type status() const;
  void set_status(::system_status_status_type value);

  // @@protoc_insertion_point(class_scope:system_status)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_status();
  void clear_has_status();
  void set_has_message();
  void clear_has_message();
  void set_has_source_message_id();
  void clear_has_source_message_id();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  ::google::protobuf::internal::ArenaStringPtr source_message_id_;
  ::message_header* header_;
  int status_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultssystem_statusImpl();
};
// -------------------------------------------------------------------

class set_data_file_path : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:set_data_file_path) */ {
 public:
  set_data_file_path();
  virtual ~set_data_file_path();

  set_data_file_path(const set_data_file_path& from);

  inline set_data_file_path& operator=(const set_data_file_path& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  set_data_file_path(set_data_file_path&& from) noexcept
    : set_data_file_path() {
    *this = ::std::move(from);
  }

  inline set_data_file_path& operator=(set_data_file_path&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const set_data_file_path& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const set_data_file_path* internal_default_instance() {
    return reinterpret_cast<const set_data_file_path*>(
               &_set_data_file_path_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(set_data_file_path* other);
  friend void swap(set_data_file_path& a, set_data_file_path& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline set_data_file_path* New() const PROTOBUF_FINAL { return New(NULL); }

  set_data_file_path* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const set_data_file_path& from);
  void MergeFrom(const set_data_file_path& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(set_data_file_path* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // @@protoc_insertion_point(class_scope:set_data_file_path)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_path();
  void clear_has_path();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::message_header* header_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsset_data_file_pathImpl();
};
// -------------------------------------------------------------------

class open_configuration_file : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:open_configuration_file) */ {
 public:
  open_configuration_file();
  virtual ~open_configuration_file();

  open_configuration_file(const open_configuration_file& from);

  inline open_configuration_file& operator=(const open_configuration_file& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  open_configuration_file(open_configuration_file&& from) noexcept
    : open_configuration_file() {
    *this = ::std::move(from);
  }

  inline open_configuration_file& operator=(open_configuration_file&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const open_configuration_file& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const open_configuration_file* internal_default_instance() {
    return reinterpret_cast<const open_configuration_file*>(
               &_open_configuration_file_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(open_configuration_file* other);
  friend void swap(open_configuration_file& a, open_configuration_file& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline open_configuration_file* New() const PROTOBUF_FINAL { return New(NULL); }

  open_configuration_file* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const open_configuration_file& from);
  void MergeFrom(const open_configuration_file& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(open_configuration_file* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string path = 2;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 2;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // @@protoc_insertion_point(class_scope:open_configuration_file)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_path();
  void clear_has_path();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::message_header* header_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsopen_configuration_fileImpl();
};
// -------------------------------------------------------------------

class acquisition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:acquisition) */ {
 public:
  acquisition();
  virtual ~acquisition();

  acquisition(const acquisition& from);

  inline acquisition& operator=(const acquisition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  acquisition(acquisition&& from) noexcept
    : acquisition() {
    *this = ::std::move(from);
  }

  inline acquisition& operator=(acquisition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const acquisition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const acquisition* internal_default_instance() {
    return reinterpret_cast<const acquisition*>(
               &_acquisition_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(acquisition* other);
  friend void swap(acquisition& a, acquisition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline acquisition* New() const PROTOBUF_FINAL { return New(NULL); }

  acquisition* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const acquisition& from);
  void MergeFrom(const acquisition& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(acquisition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef acquisition_command_type command_type;
  static const command_type START =
    acquisition_command_type_START;
  static const command_type STOP =
    acquisition_command_type_STOP;
  static inline bool command_type_IsValid(int value) {
    return acquisition_command_type_IsValid(value);
  }
  static const command_type command_type_MIN =
    acquisition_command_type_command_type_MIN;
  static const command_type command_type_MAX =
    acquisition_command_type_command_type_MAX;
  static const int command_type_ARRAYSIZE =
    acquisition_command_type_command_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  command_type_descriptor() {
    return acquisition_command_type_descriptor();
  }
  static inline const ::std::string& command_type_Name(command_type value) {
    return acquisition_command_type_Name(value);
  }
  static inline bool command_type_Parse(const ::std::string& name,
      command_type* value) {
    return acquisition_command_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // required .acquisition.command_type command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::acquisition_command_type command() const;
  void set_command(::acquisition_command_type value);

  // @@protoc_insertion_point(class_scope:acquisition)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_command();
  void clear_has_command();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::message_header* header_;
  int command_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsacquisitionImpl();
};
// -------------------------------------------------------------------

class recording : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:recording) */ {
 public:
  recording();
  virtual ~recording();

  recording(const recording& from);

  inline recording& operator=(const recording& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  recording(recording&& from) noexcept
    : recording() {
    *this = ::std::move(from);
  }

  inline recording& operator=(recording&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const recording& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const recording* internal_default_instance() {
    return reinterpret_cast<const recording*>(
               &_recording_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(recording* other);
  friend void swap(recording& a, recording& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline recording* New() const PROTOBUF_FINAL { return New(NULL); }

  recording* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const recording& from);
  void MergeFrom(const recording& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(recording* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef recording_command_type command_type;
  static const command_type START =
    recording_command_type_START;
  static const command_type STOP =
    recording_command_type_STOP;
  static inline bool command_type_IsValid(int value) {
    return recording_command_type_IsValid(value);
  }
  static const command_type command_type_MIN =
    recording_command_type_command_type_MIN;
  static const command_type command_type_MAX =
    recording_command_type_command_type_MAX;
  static const int command_type_ARRAYSIZE =
    recording_command_type_command_type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  command_type_descriptor() {
    return recording_command_type_descriptor();
  }
  static inline const ::std::string& command_type_Name(command_type value) {
    return recording_command_type_Name(value);
  }
  static inline bool command_type_Parse(const ::std::string& name,
      command_type* value) {
    return recording_command_type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .message_header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::message_header& header() const;
  ::message_header* release_header();
  ::message_header* mutable_header();
  void set_allocated_header(::message_header* header);

  // required .recording.command_type command = 2;
  bool has_command() const;
  void clear_command();
  static const int kCommandFieldNumber = 2;
  ::recording_command_type command() const;
  void set_command(::recording_command_type value);

  // @@protoc_insertion_point(class_scope:recording)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_command();
  void clear_has_command();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::message_header* header_;
  int command_;
  friend struct ::protobuf_ephys_5fedi_2eproto::TableStruct;
  friend void ::protobuf_ephys_5fedi_2eproto::InitDefaultsrecordingImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// request_system_info

// required .message_header header = 1;
inline bool request_system_info::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_system_info::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request_system_info::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::message_header& request_system_info::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:request_system_info.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* request_system_info::release_header() {
  // @@protoc_insertion_point(field_release:request_system_info.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* request_system_info::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:request_system_info.header)
  return header_;
}
inline void request_system_info::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:request_system_info.header)
}

// -------------------------------------------------------------------

// system_info

// required .message_header header = 1;
inline bool system_info::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void system_info::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void system_info::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::message_header& system_info::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:system_info.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* system_info::release_header() {
  // @@protoc_insertion_point(field_release:system_info.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* system_info::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:system_info.header)
  return header_;
}
inline void system_info::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:system_info.header)
}

// required string software_revision = 2;
inline bool system_info::has_software_revision() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void system_info::set_has_software_revision() {
  _has_bits_[0] |= 0x00000001u;
}
inline void system_info::clear_has_software_revision() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void system_info::clear_software_revision() {
  software_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_software_revision();
}
inline const ::std::string& system_info::software_revision() const {
  // @@protoc_insertion_point(field_get:system_info.software_revision)
  return software_revision_.GetNoArena();
}
inline void system_info::set_software_revision(const ::std::string& value) {
  set_has_software_revision();
  software_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:system_info.software_revision)
}
#if LANG_CXX11
inline void system_info::set_software_revision(::std::string&& value) {
  set_has_software_revision();
  software_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:system_info.software_revision)
}
#endif
inline void system_info::set_software_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_software_revision();
  software_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:system_info.software_revision)
}
inline void system_info::set_software_revision(const char* value, size_t size) {
  set_has_software_revision();
  software_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:system_info.software_revision)
}
inline ::std::string* system_info::mutable_software_revision() {
  set_has_software_revision();
  // @@protoc_insertion_point(field_mutable:system_info.software_revision)
  return software_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_info::release_software_revision() {
  // @@protoc_insertion_point(field_release:system_info.software_revision)
  clear_has_software_revision();
  return software_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_info::set_allocated_software_revision(::std::string* software_revision) {
  if (software_revision != NULL) {
    set_has_software_revision();
  } else {
    clear_has_software_revision();
  }
  software_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), software_revision);
  // @@protoc_insertion_point(field_set_allocated:system_info.software_revision)
}

// required string hardware_revision = 3;
inline bool system_info::has_hardware_revision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void system_info::set_has_hardware_revision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void system_info::clear_has_hardware_revision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void system_info::clear_hardware_revision() {
  hardware_revision_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_hardware_revision();
}
inline const ::std::string& system_info::hardware_revision() const {
  // @@protoc_insertion_point(field_get:system_info.hardware_revision)
  return hardware_revision_.GetNoArena();
}
inline void system_info::set_hardware_revision(const ::std::string& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:system_info.hardware_revision)
}
#if LANG_CXX11
inline void system_info::set_hardware_revision(::std::string&& value) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:system_info.hardware_revision)
}
#endif
inline void system_info::set_hardware_revision(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:system_info.hardware_revision)
}
inline void system_info::set_hardware_revision(const char* value, size_t size) {
  set_has_hardware_revision();
  hardware_revision_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:system_info.hardware_revision)
}
inline ::std::string* system_info::mutable_hardware_revision() {
  set_has_hardware_revision();
  // @@protoc_insertion_point(field_mutable:system_info.hardware_revision)
  return hardware_revision_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_info::release_hardware_revision() {
  // @@protoc_insertion_point(field_release:system_info.hardware_revision)
  clear_has_hardware_revision();
  return hardware_revision_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_info::set_allocated_hardware_revision(::std::string* hardware_revision) {
  if (hardware_revision != NULL) {
    set_has_hardware_revision();
  } else {
    clear_has_hardware_revision();
  }
  hardware_revision_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), hardware_revision);
  // @@protoc_insertion_point(field_set_allocated:system_info.hardware_revision)
}

// -------------------------------------------------------------------

// request_system_status

// required .message_header header = 1;
inline bool request_system_status::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void request_system_status::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void request_system_status::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::message_header& request_system_status::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:request_system_status.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* request_system_status::release_header() {
  // @@protoc_insertion_point(field_release:request_system_status.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* request_system_status::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:request_system_status.header)
  return header_;
}
inline void request_system_status::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:request_system_status.header)
}

// -------------------------------------------------------------------

// system_status

// required .message_header header = 1;
inline bool system_status::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void system_status::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void system_status::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::message_header& system_status::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:system_status.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* system_status::release_header() {
  // @@protoc_insertion_point(field_release:system_status.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* system_status::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:system_status.header)
  return header_;
}
inline void system_status::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:system_status.header)
}

// required .system_status.status_type status = 2 [default = READY];
inline bool system_status::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void system_status::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void system_status::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void system_status::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::system_status_status_type system_status::status() const {
  // @@protoc_insertion_point(field_get:system_status.status)
  return static_cast< ::system_status_status_type >(status_);
}
inline void system_status::set_status(::system_status_status_type value) {
  assert(::system_status_status_type_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:system_status.status)
}

// required string message = 3;
inline bool system_status::has_message() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void system_status::set_has_message() {
  _has_bits_[0] |= 0x00000001u;
}
inline void system_status::clear_has_message() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void system_status::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_message();
}
inline const ::std::string& system_status::message() const {
  // @@protoc_insertion_point(field_get:system_status.message)
  return message_.GetNoArena();
}
inline void system_status::set_message(const ::std::string& value) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:system_status.message)
}
#if LANG_CXX11
inline void system_status::set_message(::std::string&& value) {
  set_has_message();
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:system_status.message)
}
#endif
inline void system_status::set_message(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:system_status.message)
}
inline void system_status::set_message(const char* value, size_t size) {
  set_has_message();
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:system_status.message)
}
inline ::std::string* system_status::mutable_message() {
  set_has_message();
  // @@protoc_insertion_point(field_mutable:system_status.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_status::release_message() {
  // @@protoc_insertion_point(field_release:system_status.message)
  clear_has_message();
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_status::set_allocated_message(::std::string* message) {
  if (message != NULL) {
    set_has_message();
  } else {
    clear_has_message();
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:system_status.message)
}

// required string source_message_id = 4;
inline bool system_status::has_source_message_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void system_status::set_has_source_message_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void system_status::clear_has_source_message_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void system_status::clear_source_message_id() {
  source_message_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_message_id();
}
inline const ::std::string& system_status::source_message_id() const {
  // @@protoc_insertion_point(field_get:system_status.source_message_id)
  return source_message_id_.GetNoArena();
}
inline void system_status::set_source_message_id(const ::std::string& value) {
  set_has_source_message_id();
  source_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:system_status.source_message_id)
}
#if LANG_CXX11
inline void system_status::set_source_message_id(::std::string&& value) {
  set_has_source_message_id();
  source_message_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:system_status.source_message_id)
}
#endif
inline void system_status::set_source_message_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_message_id();
  source_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:system_status.source_message_id)
}
inline void system_status::set_source_message_id(const char* value, size_t size) {
  set_has_source_message_id();
  source_message_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:system_status.source_message_id)
}
inline ::std::string* system_status::mutable_source_message_id() {
  set_has_source_message_id();
  // @@protoc_insertion_point(field_mutable:system_status.source_message_id)
  return source_message_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* system_status::release_source_message_id() {
  // @@protoc_insertion_point(field_release:system_status.source_message_id)
  clear_has_source_message_id();
  return source_message_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void system_status::set_allocated_source_message_id(::std::string* source_message_id) {
  if (source_message_id != NULL) {
    set_has_source_message_id();
  } else {
    clear_has_source_message_id();
  }
  source_message_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_message_id);
  // @@protoc_insertion_point(field_set_allocated:system_status.source_message_id)
}

// -------------------------------------------------------------------

// set_data_file_path

// required .message_header header = 1;
inline bool set_data_file_path::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void set_data_file_path::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void set_data_file_path::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::message_header& set_data_file_path::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:set_data_file_path.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* set_data_file_path::release_header() {
  // @@protoc_insertion_point(field_release:set_data_file_path.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* set_data_file_path::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:set_data_file_path.header)
  return header_;
}
inline void set_data_file_path::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:set_data_file_path.header)
}

// required string path = 2;
inline bool set_data_file_path::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void set_data_file_path::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void set_data_file_path::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void set_data_file_path::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& set_data_file_path::path() const {
  // @@protoc_insertion_point(field_get:set_data_file_path.path)
  return path_.GetNoArena();
}
inline void set_data_file_path::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:set_data_file_path.path)
}
#if LANG_CXX11
inline void set_data_file_path::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:set_data_file_path.path)
}
#endif
inline void set_data_file_path::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:set_data_file_path.path)
}
inline void set_data_file_path::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:set_data_file_path.path)
}
inline ::std::string* set_data_file_path::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:set_data_file_path.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* set_data_file_path::release_path() {
  // @@protoc_insertion_point(field_release:set_data_file_path.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void set_data_file_path::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:set_data_file_path.path)
}

// -------------------------------------------------------------------

// open_configuration_file

// required .message_header header = 1;
inline bool open_configuration_file::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void open_configuration_file::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
inline void open_configuration_file::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::message_header& open_configuration_file::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:open_configuration_file.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* open_configuration_file::release_header() {
  // @@protoc_insertion_point(field_release:open_configuration_file.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* open_configuration_file::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:open_configuration_file.header)
  return header_;
}
inline void open_configuration_file::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:open_configuration_file.header)
}

// required string path = 2;
inline bool open_configuration_file::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void open_configuration_file::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void open_configuration_file::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void open_configuration_file::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& open_configuration_file::path() const {
  // @@protoc_insertion_point(field_get:open_configuration_file.path)
  return path_.GetNoArena();
}
inline void open_configuration_file::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:open_configuration_file.path)
}
#if LANG_CXX11
inline void open_configuration_file::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:open_configuration_file.path)
}
#endif
inline void open_configuration_file::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:open_configuration_file.path)
}
inline void open_configuration_file::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:open_configuration_file.path)
}
inline ::std::string* open_configuration_file::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:open_configuration_file.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* open_configuration_file::release_path() {
  // @@protoc_insertion_point(field_release:open_configuration_file.path)
  clear_has_path();
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void open_configuration_file::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:open_configuration_file.path)
}

// -------------------------------------------------------------------

// acquisition

// required .message_header header = 1;
inline bool acquisition::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void acquisition::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void acquisition::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::message_header& acquisition::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:acquisition.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* acquisition::release_header() {
  // @@protoc_insertion_point(field_release:acquisition.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* acquisition::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:acquisition.header)
  return header_;
}
inline void acquisition::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:acquisition.header)
}

// required .acquisition.command_type command = 2;
inline bool acquisition::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void acquisition::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void acquisition::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void acquisition::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::acquisition_command_type acquisition::command() const {
  // @@protoc_insertion_point(field_get:acquisition.command)
  return static_cast< ::acquisition_command_type >(command_);
}
inline void acquisition::set_command(::acquisition_command_type value) {
  assert(::acquisition_command_type_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:acquisition.command)
}

// -------------------------------------------------------------------

// recording

// required .message_header header = 1;
inline bool recording::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void recording::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void recording::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::message_header& recording::header() const {
  const ::message_header* p = header_;
  // @@protoc_insertion_point(field_get:recording.header)
  return p != NULL ? *p : *reinterpret_cast<const ::message_header*>(
      &::_message_header_default_instance_);
}
inline ::message_header* recording::release_header() {
  // @@protoc_insertion_point(field_release:recording.header)
  clear_has_header();
  ::message_header* temp = header_;
  header_ = NULL;
  return temp;
}
inline ::message_header* recording::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::message_header;
  }
  // @@protoc_insertion_point(field_mutable:recording.header)
  return header_;
}
inline void recording::set_allocated_header(::message_header* header) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(header_);
  }
  if (header) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      header = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    set_has_header();
  } else {
    clear_has_header();
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:recording.header)
}

// required .recording.command_type command = 2;
inline bool recording::has_command() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void recording::set_has_command() {
  _has_bits_[0] |= 0x00000002u;
}
inline void recording::clear_has_command() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void recording::clear_command() {
  command_ = 0;
  clear_has_command();
}
inline ::recording_command_type recording::command() const {
  // @@protoc_insertion_point(field_get:recording.command)
  return static_cast< ::recording_command_type >(command_);
}
inline void recording::set_command(::recording_command_type value) {
  assert(::recording_command_type_IsValid(value));
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:recording.command)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::system_status_status_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::system_status_status_type>() {
  return ::system_status_status_type_descriptor();
}
template <> struct is_proto_enum< ::acquisition_command_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::acquisition_command_type>() {
  return ::acquisition_command_type_descriptor();
}
template <> struct is_proto_enum< ::recording_command_type> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::recording_command_type>() {
  return ::recording_command_type_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ephys_5fedi_2eproto__INCLUDED
